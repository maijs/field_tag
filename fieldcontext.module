<?php

/**
 * @file
 * Field context module.
 */

/**
 * Allowed context value pattern.
 *
 * @return string
 *   Regular expression pattern for valid field context value.
 */
function fieldcontext_value_pattern() {
  $result = '/^[A-Za-z0-9\-_.]+$/';

  // Allow other modules modify context value pattern.
  drupal_alter('fieldcontext_value_pattern', $result);

  return $result;
}

/**
 * Allowed context value pattern text.
 *
 * @return string
 *   Human readable description of valid field context values.
 */
function fieldcontext_value_pattern_description_text() {
  $result = t('alphanumeric values, underscores or dashes');

  // Allow other modules modify value pattern description.
  drupal_alter('fieldcontext_value_pattern_description_text', $result);

  return $result;
}

/**
 * Field instance context options.
 *
 * Option groups and options are gathered from modules that implement
 * "fieldcontext_option_group_info" and "fieldcontext_option_info" hooks.
 *
 * @return array
 *   An array of predefined field context option groups and options.
 */
function fieldcontext_options() {
  $result = &drupal_static(__FUNCTION__, NULL);

  if (is_null($result)) {
    $result = array();

    // Get option groups from modules that implement
    // 'hook_fieldcontext_option_group_info()'.
    $option_group_info = module_invoke_all('fieldcontext_option_group_info');

    // Sort groups by weight.
    uasort($option_group_info, 'drupal_sort_weight');

    // Get options from modules that implement 'fieldcontext_option_info()'.
    $option_info = module_invoke_all('fieldcontext_option_info');

    // Sort options by weight.
    uasort($option_info, 'drupal_sort_weight');

    // Loop through all context option groups so that groups are
    // displayed first.
    foreach ($option_group_info as $group) {
      // Check if group title is set.
      if (isset($group['title'])) {
        $result[$group['title']] = array();
      }
    }

    // Get a valid context value pattern.
    $key_pattern = fieldcontext_value_pattern();

    // Loop through all context options.
    foreach ($option_info as $option_key => $option) {
      // Check if option title is set.
      if (isset($option['title'])) {
        // Check if option key matches the valid pattern.
        if (preg_match($key_pattern, $option_key)) {
          $option_title = $option['title'];

          // Check if option group title is set.
          if (isset($option['group'], $option_group_info[$option['group']]['title'])) {
            $group_title = $option_group_info[$option['group']]['title'];

            // Set option in a group.
            $result[$group_title][$option_key] = $option_title;
          }
          // A case if no group is specified.
          else {
            $result[$option_key] = $option_title;
          }
        }
        else {
          // Add a message to watchdog about invalid option key.
          watchdog('fieldcontext', 'Field context option key "%option_key" is not valid.', array('%option_key' => $option_key), WATCHDOG_NOTICE);
        }
      }
    }

    // Filter out empty groups.
    $result = array_filter($result);

    // Allow other modules modify field context options.
    drupal_alter('fieldcontext_options', $result);
  }

  return $result;
}

/**
 * Return a single field name, given a context in a entity type bundle.
 *
 * @param string $context
 *   The context of the field.
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The bundle which contains the field.
 * @param bool $preg_match
 *   (Optional) A boolean indicating whether $context parameter contains regular
 *   expression that should be used for field context matching. If true,
 *   preg_match() is used for string comparison.
 *
 * @return string
 *   A single field name that has given context.
 */
function fieldcontext_get_field_name($context, $entity_type, $bundle, $preg_match = FALSE) {
  // Single field names may be obtained only if entity type and bundle
  // is specified.
  if (!empty($entity_type) && !empty($bundle)) {
    $result = fieldcontext_get_field_name_multiple($context, $entity_type, $bundle, $preg_match);

    if (!empty($result)) {
      return reset($result);
    }
  }

  return NULL;
}

/**
 * Compare two context strings.
 *
 * @param string $context
 *   The context string.
 * @param string $other_context
 *   The string that $context should be matched against.
 * @param bool $preg_match
 *   (Optional) A boolean indicating whether $context parameter contains regular
 *   expression that should be used for field context matching. If true,
 *   preg_match() is used for string comparison.
 *
 * @return bool
 *   A boolean value whether strings match.
 */
function fieldcontext_compare_context_strings($context, $other_context, $preg_match = FALSE) {
  $result = FALSE;

  // Compare using preg_match().
  if (!empty($preg_match)) {
    // Validate user provided pattern before actually matching it.
    // Otherwise PHP will throw an error).
    $valid_pattern = '/\/.*\//i';

    if (preg_match($valid_pattern, $context) && preg_match($context, $other_context)) {
      $result = TRUE;
    }
  }
  // Use simple string comparison.
  else {
    if ($context == $other_context) {
      $result = TRUE;
    }
  }

  return $result;
}

/**
 * Return field names that correspond to given context in a entity type bundle.
 *
 * @param string $context
 *   The context that is attached to the field (regular string or a valid
 *   regular expression pattern for preg_match()).
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The bundle which contains the field.
 * @param bool $preg_match
 *   (Optional) A boolean indicating whether $context parameter contains regular
 *   expression that should be used for field context matching. If true,
 *   preg_match() is used for string comparison.
 *
 * @return array
 *   An array containing field names that have given context.
 *
 *   If $entity_type or $bundle is not specified, the array is keyed by entity
 *   type, bundle and field name.
 *   If $entity_type and $bundle is specified, the array is keyed by field name.
 */
function fieldcontext_get_field_name_multiple($context, $entity_type = NULL, $bundle = NULL, $preg_match = FALSE) {
  // Statically store results for all entity types and bundles.
  $stored_result = &drupal_static(__FUNCTION__, NULL);
  $result = array();

  if (empty($context)) {
    return $result;
  }

  // Fill $stored_result with all known field contexts.
  if (is_null($stored_result)) {
    $stored_result = array();

    // Get field instances.
    $instances = field_info_instances();

    // Loop through all entity types, bundle and fields.
    foreach ($instances as $this_entity_type => $these_bundles) {
      foreach ($these_bundles as $this_bundle => $field_names) {
        foreach ($field_names as $field_name => $instance_info) {
          if (!empty($instance_info['settings']['fieldcontext'])) {
            $stored_result[$this_entity_type][$this_bundle][$field_name] = $instance_info['settings']['fieldcontext'];
          }
        }
      }
    }
  }

  // If entity type and bundle is not specified, look through all fields in
  // every entity type bundle for a context match.
  if (empty($entity_type) && empty($bundle)) {
    foreach ($stored_result as $this_entity_type => $these_bundles) {
      foreach ($these_bundles as $this_bundle => $field_names) {
        foreach ($field_names as $field_name => $this_context) {
          if (fieldcontext_compare_context_strings($context, $this_context, $preg_match)) {
            $result[$this_entity_type][$this_bundle][$field_name] = $field_name;
          }
        }
      }
    }
  }
  // If entity type is not specified but bundle is, return all bundles in
  // stored restults.
  elseif (empty($entity_type)) {
    foreach ($stored_result as $this_entity_type => $these_bundles) {
      if (!empty($these_bundles[$bundle])) {
        foreach ($these_bundles[$bundle] as $field_name => $this_context) {
          if (fieldcontext_compare_context_strings($context, $this_context, $preg_match)) {
            $result[$this_entity_type][$bundle][$field_name] = $field_name;
          }
        }
      }
    }
  }
  // If entity type is specified but bundle is not, return all bundles in
  // specified entity type.
  elseif (empty($bundle)) {
    if (!empty($stored_result[$entity_type])) {
      foreach ($stored_result[$entity_type] as $this_bundle => $field_names) {
        foreach ($field_names as $field_name => $this_context) {
          if (fieldcontext_compare_context_strings($context, $this_context, $preg_match)) {
            $result[$entity_type][$this_bundle][$field_name] = $field_name;
          }
        }
      }
    }
  }
  // If entity type and bundle is specified, return all fields in specified
  // bundles.
  elseif (!empty($entity_type) && !empty($bundle)) {
    if (!empty($stored_result[$entity_type][$bundle])) {
      foreach ($stored_result[$entity_type][$bundle] as $field_name => $this_context) {
        if (fieldcontext_compare_context_strings($context, $this_context, $preg_match)) {
          $result[$field_name] = $field_name;
        }
      }
    }
  }

  return $result;
}

/**
 * Alter field settings form and provide field instance context settings.
 */
function fieldcontext_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field = $form['#field'];
  $instance = $form['#instance'];

  if (!empty($field['bundles']) && is_array($field['bundles'])) {
    $settings = $instance['settings'];

    // Add validate handler that will save field instance context.
    array_unshift($form['#validate'], 'fieldcontext_form_field_ui_field_edit_form_validate');

    // Add no-context options.
    $context_options_list = array('' => t('- None -'));

    // Get context options.
    $context_options_list += fieldcontext_options();

    // Allow user to define custom context.
    $context_options_list['_custom'] = t('- Custom -');

    // Set default values.
    $context_options_value = '';
    $context_custom_value = '';

    // Get saved value.
    if (isset($settings['fieldcontext']) && $settings['fieldcontext'] != '') {
      $saved_context = $settings['fieldcontext'];
      // Saved context is predefined, show it in options list, hide in custom
      // context textfield.
      $option_validation = fieldcontext_is_context_predefined($saved_context, $context_options_list);

      if (!empty($option_validation)) {
        $context_options_value = $saved_context;
      }
      // Saved context is custom, show "Custom" in options list, show context
      // in textfield.
      else {
        $context_options_value = '_custom';
        $context_custom_value = $saved_context;
      }
    }

    // Define fieldset.
    $context_form = array(
      '#type' => 'fieldset',
      '#title' => t('Field context'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 15,
    );

    // Pre-defined context options.
    $context_form['context'] = array(
      '#type' => 'select',
      '#title' => t('Context'),
      '#default_value' => $context_options_value,
      '#description' => t('Select the context of this field instance.'),
      '#options' => $context_options_list,
    );

    // User defined context.
    $context_form['context_custom'] = array(
      '#type' => 'textfield',
      '#title' => t('Context'),
      '#default_value' => $context_custom_value,
      '#description' => t('Specify custom context of this field instance (@allowed_fieldcontext_values).', array('@allowed_fieldcontext_values' => fieldcontext_value_pattern_description_text())),
      // Show only when user wants to define custom context.
      '#states' => array(
        'visible' => array(
          ':input[name="instance[settings][fieldcontext][context]"]' => array(
            'value' => '_custom',
          ),
        ),
      ),
    );

    $form['instance']['settings']['fieldcontext'] = $context_form;
  }
}

/**
 * Returns true if context is predefined.
 *
 * @param string $key
 *   The context string.
 * @param array $options
 *   The string that $context should be matched against.
 *
 * @return array
 *   An array with a matched field context. If an array is empty, the field
 *   context is not predefined.
 */
function fieldcontext_is_context_predefined($key, array $options) {
  $match = array();

  if (!empty($options) && is_array($options)) {
    foreach ($options as $option_key => $option) {
      if (is_array($option)) {
        $match = array_merge($match, fieldcontext_is_context_predefined($key, $option));
      }
      elseif ($option_key == $key) {
        $match[] = $option;
      }
    }
  }

  return $match;
}

/**
 * Validation for "field_ui_field_edit_form" form.
 */
function fieldcontext_form_field_ui_field_edit_form_validate($form, &$form_state) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];

  // Default value ($context_value will eventually be saved to instance
  // settings).
  $context_value = '';

  // Value from option list or custom? 'option' by default.
  $context_value_source = 'option';

  // Set field names.
  $context_field_names = array(
    'option' => 'instance][settings][fieldcontext][context',
    'custom' => 'instance][settings][fieldcontext][context_custom',
  );
  // Submitted instance setting values.
  $submitted_values = &$form_state['values']['instance']['settings'];

  if (isset($submitted_values['fieldcontext']['context']) && $submitted_values['fieldcontext']['context'] != '') {
    // Get context options.
    $context_options_list = fieldcontext_options();

    // Get submitted values.
    $context_options_value = $submitted_values['fieldcontext']['context'];
    $context_custom_value = $submitted_values['fieldcontext']['context_custom'];

    // If context ir predefined, save it, discard custom context.
    $option_validation = fieldcontext_is_context_predefined($context_options_value, $context_options_list);

    if (!empty($option_validation)) {
      $context_value = $context_options_value;
      $context_value_source = 'option';
    }
    // Custom context is defined.
    elseif (isset($context_custom_value) && $context_custom_value != '') {
      // Check if alphanumeric value.
      $key_pattern = fieldcontext_value_pattern();

      if (!preg_match($key_pattern, $context_custom_value)) {
        form_set_error($context_field_names['custom'], t('Allowed field context values: @allowed_fieldcontext_values.', array('@allowed_fieldcontext_values' => fieldcontext_value_pattern_description_text())));
      }
      else {
        $context_value = $context_custom_value;
        $context_value_source = 'custom';
      }
    }

    // Check if this context has already been set in other fields.
    $field_names_with_context = fieldcontext_get_field_name_multiple($context_value, $entity_type, $bundle);
    $field_names_with_context = array_diff($field_names_with_context, array($form['#field']['field_name']));

    if (!empty($field_names_with_context)) {
      $message_args = array(
        '%context' => $context_value,
        '%fieldnames' => implode(', ', $field_names_with_context),
      );
      form_set_error($context_field_names[$context_value_source], t('The context %context has already been applied to the following fields: %fieldnames.', $message_args));
    }
  }

  // Save to database as 'fieldcontext'.
  $submitted_values['fieldcontext'] = $context_value;
}
